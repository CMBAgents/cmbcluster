{{- $cloudProvider := .Values.global.cloudProvider | default "gcp" -}}
{{- $projectId := .Values.global.gcp.projectId -}}
{{- $awsAccountId := .Values.global.aws.accountId -}}
{{- $awsRegion := .Values.global.aws.region | default "us-east-1" -}}
{{- $clusterName := .Values.global.clusterName -}}
{{- $databaseBucket := "" -}}
{{- if eq $cloudProvider "gcp" -}}
  {{- $databaseBucket = printf "%s-%s-db" $projectId $clusterName -}}
{{- else if eq $cloudProvider "aws" -}}
  {{- $databaseBucket = printf "%s-db-%s" $clusterName $awsAccountId -}}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cmbcluster.fullname" . }}-backend
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cmbcluster.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  replicas: 1  # Force single replica for SQLite database consistency
  selector:
    matchLabels:
      {{- include "cmbcluster.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        {{- include "cmbcluster.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
      annotations:
        {{- if eq $cloudProvider "gcp" }}
        gke-gcsfuse/volumes: "true"
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/backend.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        # Add a postStart lifecycle hook to wait for storage mount to be ready.
        # This prevents race condition where container starts before volume is fully connected.
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - "echo 'Waiting for storage mount...' && sleep 5 && echo 'Checking mount readiness...' && touch /app/data/.mount_check && rm /app/data/.mount_check && echo 'Creating uploads directory...' && mkdir -p /app/data/uploads/applications && echo 'Storage mount is ready.'"
        # Mount the database storage
        volumeMounts:
        - name: database-storage
          mountPath: /app/data
        - name: tmp-storage
          mountPath: /tmp
        # Environment variables from values and configmap
        env:
        # === Cloud Provider Configuration ===
        - name: CLOUD_PROVIDER
          value: {{ $cloudProvider | quote }}

        {{- if eq $cloudProvider "gcp" }}
        # === GCP Configuration ===
        - name: PROJECT_ID
          value: {{ $projectId | quote }}
        - name: REGION
          value: {{ .Values.global.gcp.region | quote }}
        {{- else if eq $cloudProvider "aws" }}
        # === AWS Configuration ===
        - name: AWS_ACCOUNT_ID
          value: {{ $awsAccountId | quote }}
        - name: AWS_REGION
          value: {{ $awsRegion | quote }}
        - name: EKS_CLUSTER_NAME
          value: {{ $clusterName | quote }}
        {{- end }}

        # === Common Configuration ===
        - name: API_URL
          value: "https://api.{{ .Values.ingress.baseDomain }}"
        - name: FRONTEND_URL
          value: "https://{{ .Values.ingress.baseDomain }}"
        - name: BASE_DOMAIN
          value: {{ .Values.ingress.baseDomain | quote }}
        - name: REGISTRY_URL
          value: {{ .Values.global.registryUrl | quote }}
        - name: NAMESPACE
          value: {{ .Release.Namespace | quote }}
        - name: CLUSTER_NAME
          value: {{ $clusterName | quote }}

        # === Authentication Configuration (Deployment-Agnostic) ===
        - name: AUTH_PROVIDER
          value: {{ .Values.backend.config.authProvider | default "auto" | quote }}

        # Google OAuth credentials
        {{- if .Values.backend.config.googleClientId }}
        - name: GOOGLE_CLIENT_ID
          value: {{ .Values.backend.config.googleClientId | quote }}
        {{- end }}

        # AWS Cognito credentials (non-sensitive)
        {{- if .Values.backend.config.cognitoUserPoolId }}
        - name: COGNITO_USER_POOL_ID
          value: {{ .Values.backend.config.cognitoUserPoolId | quote }}
        {{- end }}
        {{- if .Values.backend.config.cognitoClientId }}
        - name: COGNITO_CLIENT_ID
          value: {{ .Values.backend.config.cognitoClientId | quote }}
        {{- end }}
        {{- if .Values.backend.config.cognitoIssuer }}
        - name: COGNITO_ISSUER
          value: {{ .Values.backend.config.cognitoIssuer | quote }}
        {{- end }}

        # === JWT Configuration ===
        - name: JWT_ALGORITHM
          value: {{ .Values.backend.config.jwtAlgorithm | quote }}
        - name: TOKEN_EXPIRE_HOURS
          value: {{ .Values.backend.config.tokenExpireHours | quote }}

        # === Resource Limits ===
        - name: MAX_INACTIVE_HOURS
          value: {{ .Values.backend.config.maxInactiveHours | quote }}
        - name: MAX_USER_PODS
          value: {{ .Values.backend.config.maxUserPods | quote }}

        # === Environment Settings ===
        - name: DEV_MODE
          value: {{ .Values.backend.config.devMode | quote }}
        - name: DEBUG
          value: {{ .Values.backend.config.debug | quote }}

        # === Service Account Configuration ===
        - name: USER_POD_SA_NAME
          value: {{ .Values.userEnvironment.serviceAccount.name | quote }}

        # === Database Configuration ===
        - name: DATABASE_PATH
          value: "/app/data/cmbcluster.db"
        - name: DATABASE_BUCKET
          value: {{ $databaseBucket | quote }}

        # === Security Configuration ===
        - name: TLS_ENABLED
          value: {{ .Values.security.tlsEnabled | default "true" | quote }}
        - name: RATE_LIMIT_ENABLED
          value: {{ .Values.security.rateLimitEnabled | default "true" | quote }}
        - name: ENABLE_SECURITY_HEADERS
          value: {{ .Values.security.enableSecurityHeaders | default "true" | quote }}
        - name: CSP_ENABLED
          value: {{ .Values.security.cspEnabled | default "true" | quote }}

        {{- if .Values.backend.config.redisEnabled }}
        # === Redis Configuration ===
        - name: REDIS_ENABLED
          value: {{ .Values.backend.config.redisEnabled | quote }}
        - name: REDIS_URL
          value: {{ .Values.backend.config.redisUrl | quote }}
        {{- end }}

        # === Storage Configuration ===
        {{- if eq $cloudProvider "gcp" }}
        - name: S3_DATABASE_BUCKET
          value: ""  # Not used on GCP
        - name: S3_USER_BUCKET_PREFIX
          value: ""  # Not used on GCP
        {{- else if eq $cloudProvider "aws" }}
        - name: S3_DATABASE_BUCKET
          value: {{ $databaseBucket | quote }}
        - name: S3_USER_BUCKET_PREFIX
          value: "{{ $clusterName }}-user"
        {{- end }}

        # Sensitive environment variables from secret
        # (SECRET_KEY, GOOGLE_CLIENT_SECRET, COGNITO_CLIENT_SECRET, etc.)
        envFrom:
        - secretRef:
            name: {{ .Values.backend.secretName }}

        # Health probes
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3

        resources:
          {{- toYaml .Values.backend.resources | nindent 10 }}

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false  # Allow database writes
          runAsNonRoot: true
          runAsUser: 1000

      volumes:
      # Database storage volume (cloud-specific)
      - name: database-storage
        csi:
          {{- if eq $cloudProvider "gcp" }}
          driver: {{ .Values.storage.gcp.driver }}
          volumeAttributes:
            bucketName: {{ $databaseBucket }}
            mountOptions: {{ .Values.storage.gcp.mountOptions | quote }}
          {{- else if eq $cloudProvider "aws" }}
          driver: {{ .Values.storage.aws.driver }}
          volumeAttributes:
            bucketName: {{ $databaseBucket }}
            {{- if $awsRegion }}
            region: {{ $awsRegion }}
            {{- end }}
            mountOptions: {{ .Values.storage.aws.mountOptions | quote }}
          {{- end }}

      # Temporary storage for cache
      - name: tmp-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "cmbcluster.fullname" . }}-backend
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cmbcluster.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  type: {{ .Values.backend.service.type }}
  ports:
  - port: {{ .Values.backend.service.port }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    {{- include "cmbcluster.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: backend
