/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth Login
         * @description Initiate Google OAuth login
         */
        get: operations["oauth_login_auth_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Oauth Callback
         * @description Handle OAuth callback from Google
         */
        get: operations["oauth_callback_auth_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Storages
         * @description List all storage buckets for the current user
         */
        get: operations["list_user_storages_storage_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Storage
         * @description Create a new storage bucket for the user
         */
        post: operations["create_storage_storage_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/{storage_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Storage Details
         * @description Get detailed information about a specific storage bucket
         */
        get: operations["get_storage_details_storage__storage_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Storage
         * @description Delete a storage bucket
         */
        delete: operations["delete_storage_storage__storage_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/{storage_id}/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File To Storage
         * @description Upload a file to storage bucket
         */
        post: operations["upload_file_to_storage_storage__storage_id__upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/{storage_id}/download/{object_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download File From Storage
         * @description Download a file from storage bucket
         */
        get: operations["download_file_from_storage_storage__storage_id__download__object_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/{storage_id}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Storage Objects
         * @description List objects in storage bucket
         */
        get: operations["list_storage_objects_storage__storage_id__list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/{storage_id}/objects/{object_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Storage Object
         * @description Delete an object from storage bucket
         */
        delete: operations["delete_storage_object_storage__storage_id__objects__object_path__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check for the scientific computing service.
         */
        get: operations["health_check_science_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/analysis/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Data
         * @description Generate various types of scientific data.
         */
        post: operations["generate_data_science_analysis_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/calculator/basic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Basic Math
         * @description Perform basic mathematical operations.
         */
        post: operations["basic_math_science_calculator_basic_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/calculator/array": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Array Operations
         * @description Generate a random array and return its statistics.
         */
        post: operations["array_operations_science_calculator_array_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/cosmology/power-spectrum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Power Spectrum
         * @description Get data for a simulated CMB power spectrum plot.
         */
        get: operations["get_power_spectrum_science_cosmology_power_spectrum_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/cosmology/correlation-function": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Correlation Function
         * @description Get data for a simulated galaxy correlation function plot.
         */
        get: operations["get_correlation_function_science_cosmology_correlation_function_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/science/notebook/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Notebook Code
         * @description Placeholder for a secure code execution endpoint.
         *     WARNING: This endpoint is a placeholder and does not execute code for security reasons.
         *     A secure, sandboxed environment is required for this functionality.
         */
        post: operations["execute_notebook_code_science_notebook_execute_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Environment Status
         * @description Get current user's environment status
         */
        get: operations["get_environment_status_environments_get"];
        put?: never;
        /**
         * Create Environment
         * @description Create a new user environment
         */
        post: operations["create_environment_environments_post"];
        /**
         * Delete Environment
         * @description Delete user's environment (optionally by env_id)
         */
        delete: operations["delete_environment_environments_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/environments/heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Environment Heartbeat
         * @description Update environment activity timestamp
         */
        post: operations["environment_heartbeat_environments_heartbeat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Activity
         * @description Get user activity log
         */
        get: operations["get_user_activity_activity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information
         */
        get: operations["get_current_user_info_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/environments/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Environments
         * @description List all environments for the current user (multi-environment support)
         */
        get: operations["list_user_environments_environments_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-env-vars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Env Vars
         * @description Get all environment variables for the current user
         */
        get: operations["get_user_env_vars_user_env_vars_get"];
        put?: never;
        /**
         * Set User Env Var
         * @description Add or update an environment variable for the current user
         */
        post: operations["set_user_env_var_user_env_vars_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-env-vars/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete User Env Var
         * @description Delete an environment variable for the current user
         */
        delete: operations["delete_user_env_var_user_env_vars__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ArrayCalculationRequest
         * @description Request model for array operations.
         */
        ArrayCalculationRequest: {
            /**
             * Size
             * @default 100
             */
            size: number;
        };
        /**
         * ArrayCalculationResponse
         * @description Response model for array operations.
         */
        ArrayCalculationResponse: {
            statistics: components["schemas"]["ArrayStatistics"];
            /** Values Preview */
            values_preview: number[];
        };
        /**
         * ArrayStatistics
         * @description Statistics of a numerical array.
         */
        ArrayStatistics: {
            /** Mean */
            mean: number;
            /** Std Dev */
            std_dev: number;
            /** Min */
            min: number;
            /** Max */
            max: number;
        };
        /**
         * BasicMathRequest
         * @description Request model for basic calculator operations.
         */
        BasicMathRequest: {
            /** Num1 */
            num1: number;
            /**
             * Operation
             * @example +
             * @example -
             * @example *
             * @example /
             * @example **
             * @example log
             * @example exp
             */
            operation: string;
            /** Num2 */
            num2?: number | null;
        };
        /** Body_set_user_env_var_user_env_vars_post */
        Body_set_user_env_var_user_env_vars_post: {
            /** Key */
            key: string;
            /** Value */
            value: string;
        };
        /** Body_upload_file_to_storage_storage__storage_id__upload_post */
        Body_upload_file_to_storage_storage__storage_id__upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * BucketOperationRequest
         * @description Request model for bucket operations
         */
        BucketOperationRequest: {
            /** Operation */
            operation: string;
            /**
             * Force
             * @default false
             */
            force: boolean;
            /** Backup Location */
            backup_location?: string | null;
        };
        /**
         * CalculationResponse
         * @description Response model for a calculation.
         */
        CalculationResponse: {
            /** Result */
            result: number | string;
        };
        /**
         * CosmologyPlotResponse
         * @description Response model for cosmology plot data.
         */
        CosmologyPlotResponse: {
            /** Plot Type */
            plot_type: string;
            /** X Values */
            x_values: number[];
            /** Y Values */
            y_values: number[];
            /** X Label */
            x_label: string;
            /** Y Label */
            y_label: string;
            /** Title */
            title: string;
        };
        /**
         * DataGenerationRequest
         * @description Request model for generating sample data.
         */
        DataGenerationRequest: {
            /**
             * Data Type
             * @description Type of data to generate.
             * @example Random Normal
             * @example CMB Temperature Map
             * @example Galaxy Survey
             * @example Time Series
             */
            data_type: string;
            /**
             * N Points
             * @description Number of data points to generate.
             * @default 1000
             */
            n_points: number;
        };
        /**
         * DataGenerationResponse
         * @description Response model for generated data.
         */
        DataGenerationResponse: {
            /** Data Type */
            data_type: string;
            /** Data */
            data: unknown;
            /** Statistics */
            statistics?: {
                [key: string]: number;
            } | null;
            /** Message */
            message: string;
        };
        /** EnvironmentRequest */
        EnvironmentRequest: {
            /**
             * Cpu Limit
             * @default 1
             */
            cpu_limit: number | null;
            /**
             * Memory Limit
             * @default 2Gi
             */
            memory_limit: string | null;
            /**
             * Storage Size
             * @default 10Gi
             */
            storage_size: string | null;
            /** Image */
            image?: string | null;
            /** Storage Id */
            storage_id?: string | null;
            /**
             * Create New Storage
             * @default false
             */
            create_new_storage: boolean;
            /**
             * Storage Class
             * @default STANDARD
             */
            storage_class: string | null;
            /** Env Vars */
            env_vars?: {
                [key: string]: string;
            } | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthCheck */
        HealthCheck: {
            /**
             * Status
             * @default healthy
             */
            status: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Version
             * @default 1.0.0
             */
            version: string;
            /** Uptime */
            uptime: number;
        };
        /**
         * HealthResponse
         * @description Health check response model.
         */
        HealthResponse: {
            /**
             * Status
             * @default healthy
             */
            status: string;
        };
        /**
         * NotebookExecutionRequest
         * @description Request model for executing code in the notebook.
         */
        NotebookExecutionRequest: {
            /** Code */
            code: string;
        };
        /**
         * NotebookExecutionResponse
         * @description Response model for notebook code execution.
         */
        NotebookExecutionResponse: {
            /** Status */
            status: string;
            /** Stdout */
            stdout: string;
            /** Stderr */
            stderr: string;
            /**
             * Plots
             * @default []
             */
            plots: unknown[];
            /**
             * Message
             * @default This endpoint is a placeholder and does not execute code.
             */
            message: string;
        };
        /**
         * StorageCreationResponse
         * @description Response model for storage creation
         */
        StorageCreationResponse: {
            storage: components["schemas"]["UserStorage"];
            /** Bucket Metadata */
            bucket_metadata: Record<string, never>;
            /** Permissions Configured */
            permissions_configured: boolean;
        };
        /**
         * StorageListResponse
         * @description Response model for storage listing
         */
        StorageListResponse: {
            /** Storages */
            storages: components["schemas"]["UserStorage"][];
            /** Total Count */
            total_count: number;
            usage_stats: components["schemas"]["StorageUsageStats"];
        };
        /**
         * StorageMetadata
         * @description Detailed storage metadata for management
         */
        StorageMetadata: {
            storage: components["schemas"]["UserStorage"];
            /** Bucket Metadata */
            bucket_metadata?: Record<string, never> | null;
            /** Recent Activity */
            recent_activity?: Record<string, never>[];
            /**
             * Permissions Valid
             * @default true
             */
            permissions_valid: boolean;
        };
        /**
         * StorageRequest
         * @description Request model for creating storage
         */
        StorageRequest: {
            /** @default cloud_storage */
            storage_type: components["schemas"]["StorageType"];
            /**
             * Storage Class
             * @default STANDARD
             */
            storage_class: string;
            /** Custom Name */
            custom_name?: string | null;
            /** Location */
            location?: string | null;
        };
        /**
         * StorageStatus
         * @description Storage status states
         * @enum {string}
         */
        StorageStatus: "creating" | "active" | "deleting" | "failed" | "unknown";
        /**
         * StorageType
         * @description Storage backend types
         * @enum {string}
         */
        StorageType: "pvc" | "cloud_storage" | "fuse";
        /**
         * StorageUsageStats
         * @description Storage usage statistics
         */
        StorageUsageStats: {
            /** Total Buckets */
            total_buckets: number;
            /** Total Size Bytes */
            total_size_bytes: number;
            /** Active Buckets */
            active_buckets: number;
            /**
             * Last Updated
             * Format: date-time
             */
            last_updated: string;
        };
        /** User */
        User: {
            /** Id */
            id: string;
            /** Email */
            email: string;
            /** Name */
            name: string;
            /** @default user */
            role: components["schemas"]["UserRole"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
        };
        /**
         * UserRole
         * @enum {string}
         */
        UserRole: "user" | "admin" | "researcher";
        /**
         * UserStorage
         * @description User storage bucket metadata
         */
        UserStorage: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Bucket Name */
            bucket_name: string;
            /** Display Name */
            display_name: string;
            /** @default cloud_storage */
            storage_type: components["schemas"]["StorageType"];
            /** @default creating */
            status: components["schemas"]["StorageStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Accessed */
            last_accessed?: string | null;
            /**
             * Size Bytes
             * @default 0
             */
            size_bytes: number;
            /**
             * Object Count
             * @default 0
             */
            object_count: number;
            /** Location */
            location: string;
            /**
             * Storage Class
             * @default STANDARD
             */
            storage_class: string;
            /**
             * Versioning Enabled
             * @default true
             */
            versioning_enabled: boolean;
            /** Metadata */
            metadata?: Record<string, never>;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    oauth_login_auth_login_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    oauth_callback_auth_callback_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_user_storages_storage_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageListResponse"];
                };
            };
        };
    };
    create_storage_storage_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageCreationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_storage_details_storage__storage_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageMetadata"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_storage_storage__storage_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storage_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BucketOperationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_to_storage_storage__storage_id__upload_post: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path: {
                storage_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_to_storage_storage__storage_id__upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_file_from_storage_storage__storage_id__download__object_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storage_id: string;
                object_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_storage_objects_storage__storage_id__list_get: {
        parameters: {
            query?: {
                prefix?: string;
            };
            header?: never;
            path: {
                storage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_storage_object_storage__storage_id__objects__object_path__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storage_id: string;
                object_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_science_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    generate_data_science_analysis_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataGenerationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataGenerationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    basic_math_science_calculator_basic_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BasicMathRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    array_operations_science_calculator_array_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ArrayCalculationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArrayCalculationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_power_spectrum_science_cosmology_power_spectrum_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CosmologyPlotResponse"];
                };
            };
        };
    };
    get_correlation_function_science_cosmology_correlation_function_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CosmologyPlotResponse"];
                };
            };
        };
    };
    execute_notebook_code_science_notebook_execute_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotebookExecutionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotebookExecutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
    get_environment_status_environments_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_environment_environments_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvironmentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_environment_environments_delete: {
        parameters: {
            query?: {
                /** @description Environment ID to delete (optional, deletes latest if not provided) */
                env_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    environment_heartbeat_environments_heartbeat_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_activity_activity_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_info_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    list_user_environments_environments_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_env_vars_user_env_vars_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    set_user_env_var_user_env_vars_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_set_user_env_var_user_env_vars_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_env_var_user_env_vars__key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
