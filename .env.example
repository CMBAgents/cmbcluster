# === CMB CLUSTER PRODUCTION CONFIGURATION ===
# Copy this file to .env and configure for your deployment
#
# PRODUCTION SECURITY WARNING:
# - Generate secure random secrets for production deployment
# - Never use development defaults in production
# - Store secrets securely and rotate regularly

# === CLOUD PROVIDER SELECTION ===
# Choose your cloud provider: "gcp" or "aws"
CLOUD_PROVIDER=gcp

# === GCP INFRASTRUCTURE (if CLOUD_PROVIDER=gcp) ===
# These values are used by setup-cluster.sh and deploy.sh
PROJECT_ID=your-gcp-project-id
CLUSTER_NAME=cmbcluster
REGION=us-central1
ZONE=us-central1-a

# === AWS INFRASTRUCTURE (if CLOUD_PROVIDER=aws) ===
# These values are used by setup-cluster-aws.sh and deploy-aws.sh
AWS_ACCOUNT_ID=123456789012
AWS_REGION=us-east-1
EKS_CLUSTER_NAME=cmbcluster-eks
ECR_REGISTRY_URL=123456789012.dkr.ecr.us-east-1.amazonaws.com
S3_DATABASE_BUCKET=cmbcluster-eks-db-123456789012
S3_USER_BUCKET_PREFIX=cmbcluster-eks-user

# === NETWORKING & DNS ===
# The primary domain for Ingress and TLS.
# For local testing with nip.io, get the Ingress IP after running setup-cluster.sh
# and set DOMAIN to something like "cmbcluster.EXTERNAL_IP.nip.io"
DOMAIN=cmbcluster.example.com

# Full URLs passed to the backend application. Must be consistent with the DOMAIN.
API_URL=https://api.cmbcluster.example.com
FRONTEND_URL=https://cmbcluster.example.com

# === SSL & AUTHENTICATION ===
# IMPORTANT: A real email for Let's Encrypt SSL certificate expiry notifications.
LETSENCRYPT_EMAIL=your-email@example.com

# === AUTHENTICATION PROVIDER CONFIGURATION ===
# CMBCluster supports deployment-agnostic authentication:
# - Use Google OAuth on AWS deployments
# - Use AWS Cognito on GCP deployments
# - Or use the default provider for your cloud platform
#
# AUTH_PROVIDER options:
#   "auto"    - Automatically select based on available credentials (default)
#   "google"  - Force Google OAuth (regardless of cloud platform)
#   "cognito" - Force AWS Cognito (regardless of cloud platform)
AUTH_PROVIDER=auto

# === GOOGLE OAUTH (Can be used on any cloud platform) ===
# Get credentials from: Google Cloud Console > APIs & Services > Credentials
# Create OAuth 2.0 Client ID (Web application)
# Authorized redirect URIs:
#   - https://YOUR_DOMAIN/api/auth/callback/google
#   - http://localhost:3000/api/auth/callback/google (for local dev)
#
# Leave blank if not using Google OAuth
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# === AWS COGNITO (Can be used on any cloud platform) ===
# Option 1: Run the setup script to create a new Cognito User Pool:
#   ./scripts/aws/setup-cognito.sh
#
# Option 2: Get credentials from: AWS Console > Cognito > User Pools
# Create User Pool > App Client > Generate client secret
#
# Required configuration:
COGNITO_USER_POOL_ID=
COGNITO_CLIENT_ID=
COGNITO_CLIENT_SECRET=
COGNITO_ISSUER=
#
# Example values:
# COGNITO_USER_POOL_ID=us-east-1_XXXXXXXXX
# COGNITO_CLIENT_ID=abc123xyz456
# COGNITO_CLIENT_SECRET=your-secret-here
# COGNITO_ISSUER=https://cognito-idp.us-east-1.amazonaws.com/us-east-1_XXXXXXXXX
#
# Authorized callback URLs (configured in Cognito User Pool):
#   - https://YOUR_DOMAIN/api/auth/callback/cognito
#   - http://localhost:3000/api/auth/callback/cognito (for local dev)

# === AUTHENTICATION CONFIGURATION EXAMPLES ===
#
# Example 1: GCP deployment with Google OAuth (default)
#   CLOUD_PROVIDER=gcp
#   AUTH_PROVIDER=auto  # or "google"
#   GOOGLE_CLIENT_ID=...
#   GOOGLE_CLIENT_SECRET=...
#
# Example 2: AWS deployment with Cognito (default)
#   CLOUD_PROVIDER=aws
#   AUTH_PROVIDER=auto  # or "cognito"
#   COGNITO_USER_POOL_ID=...
#   COGNITO_CLIENT_ID=...
#   COGNITO_CLIENT_SECRET=...
#   COGNITO_ISSUER=...
#
# Example 3: AWS deployment with Google OAuth (deployment-agnostic!)
#   CLOUD_PROVIDER=aws
#   AUTH_PROVIDER=google
#   GOOGLE_CLIENT_ID=...
#   GOOGLE_CLIENT_SECRET=...
#
# Example 4: GCP deployment with Cognito (deployment-agnostic!)
#   CLOUD_PROVIDER=gcp
#   AUTH_PROVIDER=cognito
#   COGNITO_USER_POOL_ID=...
#   COGNITO_CLIENT_ID=...
#   COGNITO_CLIENT_SECRET=...
#   COGNITO_ISSUER=...
#
# Example 5: Multi-provider setup (both Google and Cognito)
#   AUTH_PROVIDER=auto
#   GOOGLE_CLIENT_ID=...
#   GOOGLE_CLIENT_SECRET=...
#   COGNITO_USER_POOL_ID=...
#   COGNITO_CLIENT_ID=...
#   COGNITO_CLIENT_SECRET=...
#   COGNITO_ISSUER=...
#   # Users will see both sign-in options in the frontend

# === BACKEND SECURITY CONFIGURATION ===
# JWT secret key for token signing (CRITICAL - generate with: openssl rand -hex 32)
# If left blank, deploy.sh will generate one automatically.
SECRET_KEY=

# NextAuth.js secret for session management (generate with: openssl rand -base64 32)
NEXTAUTH_SECRET=

# Environment files encryption key (generate with: openssl rand -base64 32)
# For production, use: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
FILE_ENCRYPTION_KEY=

# JWT configuration
JWT_ALGORITHM=HS256
TOKEN_EXPIRE_HOURS=8

# === PRODUCTION SECURITY SETTINGS ===
# Set to false for production deployment
DEV_MODE=false
DEBUG=false

# Security features (enable for production)
TLS_ENABLED=true
RATE_LIMIT_ENABLED=true
ENABLE_SECURITY_HEADERS=true
CSP_ENABLED=true

# === APPLICATION BEHAVIOR ===
# The Kubernetes namespace for all resources. Defaults to CLUSTER_NAME if not set.
NAMESPACE=cmbcluster

# User environment limits
MAX_INACTIVE_HOURS=4
MAX_USER_PODS=1

# Auto-shutdown settings for free tier
FREE_TIER_MAX_UPTIME_MINUTES=60
AUTO_SHUTDOWN_CHECK_INTERVAL_MINUTES=5

# === FRONTEND CONFIGURATION ===
# NextAuth configuration
NEXTAUTH_URL=https://cmbcluster.example.com
NEXT_PUBLIC_API_URL=https://api.cmbcluster.example.com

# Application branding
NEXT_PUBLIC_APP_TITLE=CMBAgent Cloud
NEXT_PUBLIC_APP_TAGLINE=Your gateway to autonomous research

# === OPTIONAL REDIS CONFIGURATION ===
# Uncomment for distributed rate limiting in cluster deployments
# REDIS_URL=redis://redis-service:6379
# REDIS_ENABLED=true

# === DEVELOPMENT OVERRIDES ===
# For local development, you can override production settings:
# DEV_MODE=true
# DEBUG=true
# TLS_ENABLED=false
# TOKEN_EXPIRE_HOURS=24

# === PRODUCTION DEPLOYMENT CHECKLIST ===
# Before deploying to production:
# 1. Choose CLOUD_PROVIDER (gcp or aws)
# 2. Generate secure SECRET_KEY: openssl rand -hex 32
# 3. Generate secure NEXTAUTH_SECRET: openssl rand -base64 32
# 4. Generate secure FILE_ENCRYPTION_KEY: openssl rand -base64 32
# 5. Configure authentication provider:
#    - For GCP: Configure Google OAuth credentials in Google Cloud Console
#    - For AWS: Set up Cognito user pool and configure credentials
# 6. Update cloud provider configuration:
#    - For GCP: Update PROJECT_ID, REGION, ZONE
#    - For AWS: Update AWS_ACCOUNT_ID, AWS_REGION, EKS_CLUSTER_NAME
# 7. Update DOMAIN with your actual domain name
# 8. Update LETSENCRYPT_EMAIL with your email
# 9. Set DEV_MODE=false and DEBUG=false
# 10. Ensure TLS_ENABLED=true and all security features enabled
# 11. Test authentication flow in staging environment
# 12. Run deployment:
#     - For GCP: ./scripts/setup-cluster.sh && ./scripts/deploy.sh
#     - For AWS: ./scripts/setup-cluster-aws.sh && ./scripts/deploy-aws.sh
DEFAULT_IMAGE=borisbolliet/cmbagent-ui

# === NETWORKING CIDR CONFIGURATION (OPTIONAL) ===
# Override default CIDR ranges if needed. If not set, scripts will use defaults.
# GCP Configuration
SUBNET_RANGE=10.1.0.0/16
PODS_CIDR=10.4.0.0/16
SERVICES_CIDR=10.5.0.0/20
MASTER_IPV4_CIDR=172.16.0.16/28

# AWS Configuration
VPC_CIDR=10.0.0.0/16
PUBLIC_SUBNET_1_CIDR=10.0.1.0/24
PUBLIC_SUBNET_2_CIDR=10.0.2.0/24
PUBLIC_SUBNET_3_CIDR=10.0.3.0/24
PRIVATE_SUBNET_1_CIDR=10.0.11.0/24
PRIVATE_SUBNET_2_CIDR=10.0.12.0/24
PRIVATE_SUBNET_3_CIDR=10.0.13.0/24
